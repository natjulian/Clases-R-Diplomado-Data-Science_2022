prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))
#podemos ordenar por cierta variable...
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2, na.rm=TRUE),
prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))%>%
arrange(desc(prom_sup))
#si queremos conocer las 5 comunas con mayor promedio de metros cuadrados:
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2, na.rm=TRUE),
prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))%>%
arrange(desc(prom_sup))%>%
slice(1:5)
#ultima función! Similar a ifelse, pero se suele usar para categorizar variables numericas o
#agrupar variables categóricas
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 && n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso'))
#Seleccionamos las columnas para ver:
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 & n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso')) %>%
select(comuna, sitioweb, n_banos, cat_banio)
#Y ahora podriamos agrupar las comunas según categoria de baños y concoer cuántas casas hay por cada caso
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 & n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso')) %>%
group_by(comuna, cat_banio)%>%
count()%>%
arrange(comuna, n)
#Espectacular no?
##################### BIEN! AHORA PASAREMOS A LA ACTIVIDAD GUIADA, ESPERO PODER HACER DINÁMICA DE GRUPOS
##### 7-8 PERSONAS POR SALA, Y LOS AYUDANTES SE IRÁN MOVIENDO ENTRE LAS SALAS RESPONDIENDO DUDAS :D
#SOLUCIONARIO: no ver sin antes intentarlo >:c
#1.Cambie el nombre de la variable Quien_Vende por Vendedor.
viviendasRM<- viviendasRM %>%
rename(vendedor=quien_vende)
#2. Cree una nueva variable que contenga la superficie sin construir.
viviendasRM
viviendasRM%>%
mutate(sup_sin_cons=total_superficie_m2-superficie_construida_m)
viviendasRM%>%
mutate(sup_sin_cons=total_superficie_m2-superficie_construida_m2)
summary(viviendasRM)
unique(viviendasRM$superficie_construida_m2)
112.3
viviendasRM%>%
select(total_superficie_m2, superficie_construida_m2)%>%
class()
viviendasRM%>%
select(total_superficie_m2, superficie_construida_m2)%>%
summary()
unique(viviendasRM$superficie_construida_m2)
as.numeric(viviendasRM$superficie_construida_m2)
unique(viviendasRM$superficie_construida_m2)
as.numeric(viviendasRM$superficie_construida_m2)
is.na(as.numeric(viviendasRM$superficie_construida_m2))
viviendasRM$superficie_construida_m2[is.na(as.numeric(viviendasRM$superficie_construida_m2)),]
unique(viviendasRM$superficie_construida_m2)
viviendasRM%>%
arrange(desc(n_banos))%>%
slice(1:10)
viviendasRM%>%
group_by(n_banos)%>%
count()
viviendasRM%>%
summarise(prom_uf=mean(valor_uf), prom_clp=mean(valor_clp))
names(viviendasRM)
viviendasRM%>%
mutate(cat_banio=case_when(n_habitaciones<2 ~'pocas_hab',
n_habitaciones>=3 & n_habitaciones<=5 ~'varias_hab',
TRUE ~ 'muchas_hab'))
viviendasRM%>%
mutate(cat_habit=case_when(n_habitaciones<2 ~'pocas_hab',
n_habitaciones>=3 & n_habitaciones<=5 ~'varias_hab',
TRUE ~ 'muchas_hab'))%>%
select(n_habitaciones, cat_habit)
unique(viviendasRM$superficie_construida_m2)
library(stringr)
str_detect(viviendasRM$superficie_construida_m2, 'ha')
str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha')
sum(str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha'))
sum(str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha'), na.rm=TRUE)
str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha')
sum(str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha'), na.rm=TRUE)
str_remove(tolower(viviendasRM$superficie_construida_m2), 'ha')
as.numeric(str_remove(tolower(viviendasRM$superficie_construida_m2), 'ha'))
viviendasRM<-viviendasRM%>%
mutate(superficie_construida_m2=as.numeric(str_remove(tolower(superficie_construida_m2), 'ha')))
viviendasRM<-viviendasRM%>%
mutate(sup_sin_cons=total_superficie_m2-superficie_construida_m2)
viviendasRM$sup_sin_cons
names(viviendasRM)
str_replace(names(viviendasRM), 'n', 'num')
str_replace(names(viviendasRM), '$n', 'num')
str_replace(names(viviendasRM), 'n$', 'num')
str_replace(names(viviendasRM), 'n_', 'num_')
str_replace(names(viviendasRM), 'n', 'num')
?Str_replace
?str_replace
str_replace(names(viviendasRM), '(.*)\\*$', 'num')
str_replace(names(viviendasRM), '(n*)\\*$', 'num')
str_replace(names(viviendasRM), 'n(.*)\\*$', 'num')
str_replace(names(viviendasRM), '\\', 'num')
str_replace(names(viviendasRM), '\\*', 'num')
str_replace(names(viviendasRM), 'n\\*', 'num')
str_replace(names(viviendasRM), '\\n', 'num')
tolower(viviendasRM$superficie_construida_m2)
Str_remove_all(tolower(viviendasRM$superficie_construida_m2), [:alpha:])
str_replace(names(viviendasRM), '^[n]', 'num')
str_replace(names(viviendasRM), '^[n_]', 'num')
names(viviendasRM)<- str_replace(names(viviendasRM), '^[n_]', 'num')
head(viviendasRM)
str_replace(names(viviendasRM), '[vivienda]^', 'num')
Str_remove_all(tolower(viviendasRM$superficie_construida_m2), '[:alpha:]')
str_remove_all(tolower(viviendasRM$superficie_construida_m2), '[:alpha:]')
str_remove_all(tolower(viviendasRM$comuna), '[:alpha:]')
str_replace(names(viviendasRM), '[vivienda]$', 'num')
str_replace(names(viviendasRM), '[vivienda]$', 'num')
str_replace(names(viviendasRM), 'vivienda$', 'num')
str_replace(names(viviendasRM), '[da]$', 'num')
str_replace(names(viviendasRM), '[a]$', 'num')
as.Date("1982-01-13")
as.Date("Jan-13-82", format = "%b-%d-%y")
as.Date("13 January, 1982", format = "%d %B, %Y")
fecha <- "1995-04-09" #chr
fecha <- as.Date(fecha) #date
year(fecha);month(fecha);day(fecha)
library(lubridate)
year(fecha);month(fecha);day(fecha)
fechas <- c("95-04-09", "87-12-03", "89-09-09")
parse_date_time(fechas, "ymd")
parse_date_time(fechas, "y m d")
parse_date_time(fechas, "%y%m%d")
fechas <- c("1995-04-09", "09091989", "03-04-1987")
fechas <- parse_date_time(fechas, c("dmy", "ymd"))
fechas
day(fechas)
x<-c(1, 10, 15)
y<-c(1, 10, 15)
var<-c(1, 10, 15)
ggplot(data, aes(x=fecha, y=var)) +
geom_line( color="steelblue") +
geom_point()
data<-data.frame(var, fechas)
ggplot(data, aes(x=fecha, y=var)) +
geom_line( color="steelblue")
data
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue")
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point()
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_ipsum()
library(hrbrthemes)
library(hrbrthemes)
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_ipsum()
ggplot(data, aes(x=fecha, y=var)) +
geom_line( color="steelblue") +
geom_point() +
xlab("") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60,
hjust=1)) +
scale_x_date(limit=c(as.Date("2017-01-01"),
as.Date("2017-02-11"))) +
ylim(0,1.5)
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_ipsum()
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_minimal()
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_minimal()+ #agrego un tema
scale_x_date(date_labels = "%Y %b %d")
summary(data)
class(data$fechas)
fechas <- parse_date_time(fechas, c("dmy", "ymd"))
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_minimal()+ #agrego un tema
scale_x_date(limit=c(as.Date("2017-01-01"),
as.Date("2017-02-11")))
ggplot(data, aes(x=fechas, y=var)) +
geom_line( color="steelblue") +
geom_point() + #le agrego los puntitos
theme_minimal() #agrego un tema
load(file = "Bases de datos/nombres1.RData")
load(file = "Clase 4/Bases de datos/nombres1.RData")
load(file = "Clase 4/Bases de datos/nombres2.RData")
inner_join(nombres1, nombres2)
dim(nombres1)
dim(nombres2)
nombresv2<-nombres2%>% slice(1:7)
inner_join(nombres1, nombres2) #reconoce automáticamente que debe cruzar por nombre :D
inner_join(nombres1, nombresv2) #reconoce automáticamente que debe cruzar por nombre :D
dim(nombres1)
dim(nombres2)
nombres1
nombres
nombres2
nombresv2<-nombres2%>% slice(1:7)
nombresv1<-nombres1%>% slice(4:10)
(nombresv1<-nombres1%>% slice(4:10))
(nombresv2<-nombres2%>% slice(1:7))
dim(nombresv1)
dim(nombresv2)
(nombresv1<-nombres1%>% slice(4:10))
(nombresv2<-nombres2%>% slice(1:7))
dim(nombresv1)
dim(nombresv2)
(nombresv1<-nombres1%>% slice(3:10))
(nombresv2<-nombres2%>% slice(1:7))
inner_join(nombres1, nombresv2) #reconoce automáticamente que debe cruzar por nombre :D
dim(nombresv1)
dim(nombresv2)
inner_join(nombres1, nombresv2) #reconoce automáticamente que debe cruzar por nombre :D
inner_join(nombresv1, nombresv2) #reconoce automáticamente que debe cruzar por nombre :D
dim(nombresv1)
dim(nombresv2)
inner_join(nombresv1, nombresv2) #reconoce automáticamente que debe cruzar por nombre :D
left_join(nombres1, nombresv2)
left_join(nombresv1, nombresv2)
right_join(nombresv1, nombresv2)
full_join(nombresv1, nombresv2)
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
load(file = "Clase 4/Bases de datos/chart_chile.RData")
load(file = "Clase 4/Bases de datos/chart_arg.RData")
head(chart_chile)
head(base_chile)
names(base_chile)
head(base_argentina)
names(base_argentina)
str_replace(base_argentina$title, ' ', '_')
base_argentina$title<-str_replace(base_argentina$title, ' ', '_')
base_argentina$artist<-str_replace(base_argentina$artist, ' ', '_')
base_chile$artist<-str_replace(base_chile$artist, ' ', '_')
base_argentina$title<-str_replace(base_argentina$title, ' ', '_')
base_chilea$title<-str_replace(base_chile$title, ' ', '_')
base_argentina$artist<-str_replace(base_argentina$artist, ' ', '_')
base_chile$artist<-str_replace(base_chile$artist, ' ', '_')
base_argentina$title<-str_replace(base_argentina$title, ' ', '_')
base_chile$title<-str_replace(base_chile$title, ' ', '_')
base_argentina$artist<-str_replace(base_argentina$artist, ' ', '_')
base_chile$artist<-str_replace(base_chile$artist, ' ', '_')
base_chile<- base_chile%>%
mutate(artist=str_replace(artist, ' ', '_'),
title=str_replace(artist, ' ', '_'))
base_argentina<- base_argentina%>%
mutate(artist=str_replace(artist, ' ', '_'),
title=str_replace(artist, ' ', '_'))
base_argentina
base_argentina$date
base_argentina<- base_argentina%>%
mutate(date=as.Date(date))
base_chile<- base_chilea%>%
mutate(date=as.Date(date))
base_chile<- base_chile%>%
mutate(date=as.Date(date))
base_argentina<- base_argentina%>%
mutate(dayofyear=yday(date), year=year(date))
base_chile<- base_chile%>%
mutate(dayofyear=yday(date), year=year(date))
head(base_argentina)
head(base_chile)
cumple <- as.Date("2021-04-25")
yday(cumple)
base_argentina<- base_argentina %>%
filter(dayofyear==yday(cumple), year==2021)
base_argentina
head(base_argentina)
base_chile<- base_chile %>%
filter(dayofyear==yday(cumple), year==2021)
head(base_chile)
?left_join
left_join(base_chile, base_argentina, by=c('rank', 'date') )
head(left_join(base_chile, base_argentina, by=c('rank', 'date')))
left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
head(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
head(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina')))
head(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
head(left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina')))
load(file = "Clase 4/Bases de datos/chart_chile.RData")
load(file = "Clase 4/Bases de datos/chart_arg.RData")
head(base_chile)
names(base_chile)
head(base_argentina)
names(base_argentina)
base_chile<- base_chile%>%
mutate(artist=str_replace(artist, ' ', '_'),
title=str_replace(title, ' ', '_'))
base_argentina<- base_argentina%>%
mutate(artist=str_replace(artist, ' ', '_'),
title=str_replace(title, ' ', '_'))
base_argentina<- base_argentina%>%
mutate(date=as.Date(date))
base_chile<- base_chile%>%
mutate(date=as.Date(date))
base_argentina<- base_argentina%>%
mutate(dayofyear=yday(date), year=year(date))
base_chile<- base_chile%>%
mutate(dayofyear=yday(date), year=year(date))
head(base_argentina)
head(base_chile)
cumple <- as.Date("2021-04-25")
yday(cumple)
base_argentina<- base_argentina %>%
filter(dayofyear==yday(cumple), year==2021)
head(base_argentina)
base_chile<- base_chile %>%
filter(dayofyear==yday(cumple), year==2021)
head(base_chile)
left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina'))
head(left_join(base_chile, base_argentina, by=c('rank', 'date'), suffix=c('chile', 'argentina')))
left_join(base_chile, base_argentina, by='rank', suffix=c('chile', 'argentina'))
head(left_join(base_chile, base_argentina, by='rank', suffix=c('chile', 'argentina')))
left_join(base_chile, base_argentina, by='rank', suffix=c('.chile', '.argentina'))
head(left_join(base_chile, base_argentina, by='rank', suffix=c('.chile', '.argentina')))
left_join(base_chile, base_argentina, by='tittle', suffix=c('.chile', '.argentina'))
left_join(base_chile, base_argentina, by='title', suffix=c('.chile', '.argentina'))
head(left_join(base_chile, base_argentina, by='title', suffix=c('.chile', '.argentina')))
library(readxl)
viviendasRM <- read_excel("Clase 4/Bases de datos/viviendasRM.xlsx")
View(viviendasRM)
head(viviendasRM)
#¿qué paso sigue?......
# a) arreglar los nombres no?
library(janitor)
(viviendasRM<-viviendasRM%>%clean_names()) #nombres arregladossssss *0*
# b) Reemplazar los No de N°estacionamientos por 0
library(dplyr)
viviendasRM<-viviendasRM%>%
mutate(n_estacionamientos=as.numeric(ifelse(n_estacionamientos=='No', 0, n_estacionamientos)))
viviendasRM %>% select(n_estacionamientos) #arregladisimo!!
viviendasRM %>% select(n_estacionamientos)%>%summary()
library(ggplot2)
#qué tipo de gráfico sería adecuado... para el n° de estacionamientos?? **DISCUSION**
ggplot(data=viviendasRM, aes(x=n_estacionamientos))+
geom_bar()+
ylab('Cantidad de Casas en Venta de RM')+ #nombre eje y
xlab('Cantidad de estacionamientos') #nombre eje x
#Podemos enchular nuestro gráfico!!
ggplot(data=viviendasRM, aes(x=n_estacionamientos))+
geom_bar(fill="orange", col='red')+  #listado de colores: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
ylab('Cantidad de Casas en Venta de RM')+ #nombre eje y
xlab('Cantidad de estacionamientos') + #nombre eje x
scale_x_continuous(breaks = seq(0, max(viviendasRM$n_estacionamientos, na.rm=TRUE), by=1))+
scale_y_continuous(breaks = seq(0, 600, by=100))+
theme_minimal()+
ggtitle('Cantidad de estacionamientos de casas en Venta en RM - 2022') #hermoso no? :D
# Podemos renombrar nuestras variables
viviendasRM<- viviendasRM %>%
rename(sitioweb=link)  #A la variable llamada link le cambiamos el nombre a sitioweb
# Podemos filtrar
unique(viviendasRM$comuna) # con esto conocemos las comunas que tenemos en nuestra base de datos
viviendasRM%>%
filter(comuna=='Cerro Navia'|comuna=='Lampa')
## y podriamos hacer el mismo grafico anterior, pero solo a estas comunas:
ggplot(data=viviendasRM%>%
filter(comuna=='Cerro Navia'|comuna=='Lampa')
, aes(x=n_estacionamientos))+
geom_bar(fill="orange", col='red')+  #listado de colores: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
ylab('Cantidad de Casas en Venta de RM')+ #nombre eje y
xlab('Cantidad de estacionamientos') + #nombre eje x
scale_x_continuous(breaks = seq(0, max(viviendasRM$n_estacionamientos, na.rm=TRUE), by=1))+
scale_y_continuous(breaks = seq(0, 45, by=2))+
theme_minimal()+
ggtitle('Cantidad de estacionamientos de casas en Venta en RM - 2022') #hermoso no? :D
#Para hacer un grafico de porcentajes
ggplot(data=viviendasRM%>%
filter(comuna=='Cerro Navia'|comuna=='Lampa')
, aes(x=n_estacionamientos))+
geom_bar(aes(y = (..count..)/sum(..count..)),fill="orange", col='red')+  #listado de colores: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
ylab('Cantidad de Casas en Venta de RM')+ #nombre eje y
xlab('Cantidad de estacionamientos') + #nombre eje x
scale_x_continuous(breaks = seq(0, max(viviendasRM$n_estacionamientos, na.rm=TRUE), by=1))+
scale_y_continuous(breaks = seq(0, 1, by=0.05))+
theme_minimal()+
ggtitle('Cantidad de estacionamientos de casas en Venta en RM - 2022') #hermoso no? :D
### :D yap, mucho de ggplot, debemos continuar!
#Slide 7: Otras operaciones
#Si queremos estadisticas por comuna...
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2),
prom_nbanos=mean(n_banos),
max_n_estacion=max(n_estacionamientos))
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2),
prom_nbanos=mean(n_banos),
max_n_estacion=max(n_estacionamientos))
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2, na.rm=TRUE),
prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2, na.rm=TRUE),
prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))%>%
arrange(desc(prom_sup))
viviendasRM%>%
group_by(comuna)%>%
summarise(prom_sup=mean(total_superficie_m2, na.rm=TRUE),
prom_nbanos=mean(n_banos, na.rm=TRUE),
max_n_estacion=max(n_estacionamientos, na.rm=TRUE))%>%
arrange(desc(prom_sup))%>%
slice(1:5)
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 && n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso'))
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 & n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso')) %>%
select(comuna, sitioweb, n_banos, cat_banio)
viviendasRM%>%
mutate(cat_banio=case_when(n_banos==0 ~'Sin banio',
n_banos>0 & n_banos<3 ~'Entre 1 y 3 banios',
TRUE ~ 'Otro caso')) %>%
group_by(comuna, cat_banio)%>%
count()%>%
arrange(comuna, n)
viviendasRM<- viviendasRM %>%
rename(vendedor=quien_vende)
viviendasRM%>%
arrange(desc(n_banos))%>%
slice(1:10)
viviendasRM%>%
group_by(n_banos)%>%
count()
viviendasRM%>%
summarise(prom_uf=mean(valor_uf), prom_clp=mean(valor_clp))
viviendasRM%>%
mutate(cat_banio=case_when(n_habitaciones<2 ~'pocas_hab',
n_habitaciones>=3 & n_habitaciones<=5 ~'varias_hab',
TRUE ~ 'muchas_hab'))
viviendasRM%>%
mutate(cat_habit=case_when(n_habitaciones<2 ~'pocas_hab',
n_habitaciones>=3 & n_habitaciones<=5 ~'varias_hab',
TRUE ~ 'muchas_hab'))%>%
select(n_habitaciones, cat_habit)
viviendasRM<- viviendasRM%>%
mutate(sup_sin_cons=total_superficie_m2-superficie_construida_m2)
viviendasRM%>%
select(total_superficie_m2, superficie_construida_m2)%>%
summary()
unique(viviendasRM$superficie_construida_m2)
library(stringr)
str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha')
sum(str_detect(tolower(viviendasRM$superficie_construida_m2), 'ha'), na.rm=TRUE) #solo hay 1 caso
str_remove(tolower(viviendasRM$superficie_construida_m2), 'ha')
as.numeric(str_remove(tolower(viviendasRM$superficie_construida_m2), 'ha'))
str_remove_all(tolower(viviendasRM$superficie_construida_m2), '[:alpha:]')
str_remove(tolower(viviendasRM$superficie_construida_m2), '[:alpha:]')
?str_remove
viviendasRM<-viviendasRM%>%
mutate(superficie_construida_m2=as.numeric(str_remove_all(tolower(superficie_construida_m2),  '[:alpha:]')))
viviendasRM<-viviendasRM%>%
mutate(sup_sin_cons=total_superficie_m2-superficie_construida_m2)
viviendasRM$sup_sin_cons
names(viviendasRM)
str_replace(names(viviendasRM), 'n', 'num')
str_replace(names(viviendasRM), '^[n_]', 'num') #taraaaaaaaa :)
names(viviendasRM)<- str_replace(names(viviendasRM), '^[n_]', 'num')
head(viviendasRM) #tamos ready :)
str_replace(names(viviendasRM), '[a]$', 'num')
str_replace(names(viviendasRM), '[a]$', 'num')
str_replace(names(viviendasRM), 'vivienda$', 'num')
?inner_join
