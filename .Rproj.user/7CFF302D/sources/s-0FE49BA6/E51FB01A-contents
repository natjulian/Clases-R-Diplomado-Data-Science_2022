---
title: "Herramientas Computacionales, Algoritmos y Machine Learning (HCML)"
subtitle: "Clase 3: Introducción a Tidyverse"
author: "<span style='font-size: 30px'>Stephanie Orellana - Camila Paredes - Natalie Julian - Elías Alvear</style>"
institute: "Pontificia Universidad Católica de Chile"
date: ""
output:
  xaringan::moon_reader:
    css:  
      - xaringan-themer.css
      - estilos.css
    lib_dir: libs
    seal: false
    nature:
      titleSlideClass: "inverse"
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: "16:12" 
---

class: left, bottom
background-image: url(media/logo.png)
background-position: 95% 7%
background-size: 40%

# `r rmarkdown::metadata$title`
----
## `r rmarkdown::metadata$subtitle`
### `r rmarkdown::metadata$author`
### `r rmarkdown::metadata$date`

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
style_mono_light(base_color = "#23395b",
#style_duo(
 # primary_color = "#576675",
 # secondary_color="#f5f5dc", # FF7373
  header_font_google = google_font("Fjalla One"),
  text_font_google   = google_font("Roboto"),
  code_font_google   = google_font("Fira Mono")
)

library(tidyverse)
library(datos)
```

<style type="text/css">
.chico1 .remark-code{ 
font-size: 12px;
}
</style>

---
## Clase 3: Introducción a Tidyverse

.center[<img src='media/tidybanner.png' width='100px'>]

.pull-left[
* [**Repaso: Operadores lógicos**](#logic)

* [**Repaso: Data frames y tibble**](#df)

* [**Importación de Datos**](#impr)

* [**Limpieza de Datos: `janitor`**](#jani)

* [**Introducción a `tidyverse`**](#tidy)

* [**Sintaxis en `tidyverse`**](#tidy2)


]

.pull-right[


* [**Funciones `dplyr`**](#dplyr)

* [**Actividad 1 `dplyr`**](#act1)

* [**Actividad 2 `dplyr`**](#act2)

* [**Gráficos con `ggplot2`**](#ggplot2)

* [**Material Complementario**](#adios)

]





---
class: inverse, middle

# Repaso

---

name: logicos

# Operadores lógicos

```{r warning=FALSE, echo=FALSE, message=FALSE}
library(kableExtra)
library(dplyr)
a = tibble("Operador" = c("Menor que", 
                          "Mayor que",
                          "Menor o igual que",
                          "Mayor o igual que",
                          "Igual que",
                          "Distinto que",
                          "Intersección",
                          "Unión",
                          "Dentro de"),
           "Código" = c("<",">","<=",">=","==","!=","&","|","%in%"))
```

<p>En R los operadores lógicos permiten realizar preguntas, las que serán respuestas como  verdadero (<code>TRUE</code>) o falso (<code>FALSE</code>), algunos operadores básicos son:</p>

.pull-left[

```{r warning=FALSE, echo=FALSE}
a %>% kbl(align="lc") %>% kable_styling()
```

]


.pull-right[
```{r}
10 > 5
"Gato" == "gato"
c("a","B","c") %in% letters
```
]

---
name: df
# Data frames y tibble

<p>En el diplomado trabajaramenos principalmente con bases de datos ordenadas:</p>
.center[<img src='media/dftibble.png' width='600px'>]

<p>Cuando carguemos bases de datos en R estas pueden ser de dos tipos, <code class='bold'>data frame</code> o <code class='bold'>tibble</code>.

Las funciones <code class='bold'>tibble()</code> y <code class='bold'>as_tibble()</code> del paquete <code>tibble</code> nos permiten crear este tipo de objetos y transformar un data frame a este formato. 

---
class: inverse, middle

# Importación de datos

---
name: csv
### Importación de datos

<p>Dependiendo del tipo de documento que queramos importar en R tendremos que usar funciones distintas o hasta instalar diversos packages. Algunas funciones de importación que nos pueden servir son: </p>

<b>Importar archivos <code>txt</code></b>

```{r eval=F}
read.table("<Ruta del archivo>", header = TRUE, ... )
readr::read_csv("<Ruta del archivo>", col_names = TRUE,...)
```

<b>Importar archivos <code>csv</code></b>
Dependiendo de cómo esté codificado el archivo csv hay distintas funciones para cargar:

- **`read_csv`** : Si los decimales están con puntos y las variables se separan por comas.
- **`read_csv2`**  :Si los decimales están con comas y las variables se separan por punto y coma (;).

```{r eval=F}
readr::read_csv("<Ruta del archivo>", col_names = TRUE, ...)
readr::read_csv2("<Ruta del archivo>", col_names = TRUE, ...)
```

---
name: xl
### Importación de datos


<b>Importar archivos <code>excel</code></b>

La librería <code class="bold">readxl</code> tiene múltiples funciones para cargar archivos en formato excel, un argumento importante de estas funciones es **`sheet`**, en donde podemos indicar cuál hoja queremos importar (indicando la posición o el nombre). Sus principales funciones son:

```{r eval=F}
readxl::read_excel("<Ruta del archivo>", col_names = TRUE, ...)
readxl::read_xls()
readxl::read_xlsx()
```

<b>Importar múltiples tipos de archivos</b>


El paquete <code>haven</code> contiene multiples funciones para importar archivos de SPSS, STATA y SAS con funciones como <code class='bold'>read_sas()</code>, <code class='bold'>read_por()</code>, <code class='bold'>read_sav()</code> y <code class='bold'>read_dta()</code>

El paquete <code>rio</code> y su función <code class="bold">import</code> nos permiten importar archivos de numerosos tipos de formato, incluyendo Excel, SAS, SPSS, STATA, Minitab, Matlab, JSON, etc. Es recomendable su uso si la base a cargar es limpia y no tiene problemas de importación.

```{r eval=F}
rio::import("<Ruta del archivo>")
```

---
class: deli
### Problemas en la importación de datos

.large[**Delimitadores**]

Algunas veces las observaciones de las bases de datos están separadas por distintos delimitadores, esto puede configurarse para realizar correctamente la lectura de los datos en las distintas funciones de importación:

```{r eval=F}
read.table(..., sep="<delimitador>")
readr::read_csv(...,sep="<delimitador>")
```

.large[**Saltos de fila**]

<p>El argumento <code class='bold'>skip</code> presente en la mayoría de las funciones para cargar datos permite saltarse un número de filas de observaciones para realizar la lectura de datos, esto sirve para cargar archivos en donde la base de datos no empieza desde la primera fila.</p>


```{r eval=F}
readr::read_csv(...,skip=n)
readxl::read_excel(...,skip=n)
```


---
class: NA


.large[
<p><b>Codificación de datos faltantes (NA)</b></p>
]

Es común que en las bases de datos, especialmente en las encuestas, exista una codificación de valores faltantes distinto a una celda vacía (por ejemplo, *, 88 o 99). Dependiendo de cómo importemos los datos esto puede re codificarse de distintas formas.

<b>Directamente al importar</b>

Algunas funciones de importación tienen argumentos que nos permiten codificar observaciones como NA dado un vector de referencia:

```{r eval=FALSE}
readr::read_csv("archivo", na = vector, ... )
readxl::read_excel("archivo", na = vector, ... )
```

<b>Después de importar</b>

Uno puede usar distintas herramientas para recodificar elementos como NA, a continuación mostramos dos formas equivalentes, usando R base y <code>dplyr</code> respectivamente.

```{r eval=FALSE}
nombre_base[ nombre_base %in% vector ] <- NA

nombre_base %>% dplyr::na_if(vector)
```




---
.large[
<b>Observaciones agrupadas</b>
]

.pull-left[
Algunas bases de datos contienen filas agrupadas, esto es problemático dado que sólo se cargará información a la primera celda contenida en esta agrupación, es decir:

|Mes | Sucursal | ... |
| ----- | ----- | ----- |
| ENERO | A | ... |
| `NA` | B| ... |
| `NA` | C|... |
</br>
]

.pull-right[
<img src="media/foto_agrupado.png">
]

Si el documento es un excel, esto se puede solucionar usando el argumento <code class="bold">fillMergedCells = TRUE</code> al cargar el archivo usando el comando <code class:"bold">openxlsx::read.xlsx()</code>. 

Si el archivo ya está cargado, el comando <code class="bold">tidyr::fill</code> nos permite llenar bases de datos con variables incompletas de muchas formas, gracias a su argumento <code>direction</code>.



---
name: janitor

## Paquete `janitor`

El paquete <code>janitor</code> contiene funciones útiles para la limpieza y manejo de bases de datos sucias, algunas de sus funciones son:

<p><code class="bold">clean_names()</code> Permite limpiar los nombres de las variables de una base de datos, realizando algunas modificaciones:</p>
<ul>
  <li>Transforma todo a minúsculas.</li>
  <li>Reemplaza espacios por "_".</li>
  <li>Elimina tildes.</li>
  <li>Convierte % a "percent".</li>
  <li>¡entre otros!</li>
</ul>

.center[
```{r eval=FALSE}
nombre_base %>% clean_names()
```
]


<p><code class='bold'>remove_empty()</code> Permite remover las filas/columnas vacías de una base de datos.</p>

.center[
```{r eval=FALSE}
nombre_base %>% remove_empty(which=c('rows','cols'))
```
]

---

class: inverse, middle

<h1> Manejo de datos con <code class='blanco'>tidyverse</code>


---
name: tidy
# Tidyverse

<p>El <code class='bold'>tidyverse</code> es un universo de paquetes para Data Science en R. Algunos de sus paquetes centrales son:</p>

.pull-left[


<div><b>• ggplot2 :</b> Visualización de datos. </div>
</br>
<div><b>• dplyr :</b> Manipulación de datos.</div>
</br>
<div><b>• tidyr :</b> Herramientas para ordenar datos.</div>
</br>
<div><b>• tibble :</b> Reinvención de data frames.</div>
</br>
<div><b>• stringr :</b> Manejo con cadenas de texto (strings).</div>
</br>
<div><b>• readr :</b> Importación de datos.</div>

Y muchos más: **purrr**, **forcats**, **lubridate**, **readxl**, **haven**, etc.

]

.pull-right[
<img src='media/tidy.png' width='300px'>
]


---
### Instalación/carga de tidyverse.

<p>En la clase anterior instalamos el paquete <code>tidyverse</code>. Para cargarlo en nuestra sesión tenemos que usar el comando <code>library()</code>. (Si estás usando RStudioCloud tendrán que instalarlo nuevamente):</p>

```{r, eval=FALSE}
install.packages("tidyverse") # Instalar tidyverse

library(tidyverse) # Cargarlo en la sesión
```

Esto carga los ocho paquetes centrales del <code>tidyverse</code>: <code>dplyr, tidyr, tibble, ggplot2, purrr, stringr, forcats, readr</code>. El resto de los paquetes es necesario cargarlos de manera individual.
---
name: tidy2
# Sintaxis en Tidyverse

<p> La sintaxis del <code class='bold'>tidyverse</code> se ha popularizado en los últimos años porque permite leer el código y programar de forma más parecida a como leemos (de izquierda a derecha y de arriba hacia abajo). Esto es posible gracias al operador "pipe" <code class='bold'>%>%</code> (Ctrl/Cmd + Shift + M), que funciona de la siguiente forma: </p>

.center[<img src='media/funcion3.png' width="500px">]

.pull-left[
<b>Ejemplo R base:</b>
```{r eval = FALSE}
mean(paises[paises$anio == 2007,
            ]$poblacion)
```
]

.pull-right[
<b>Ejemplo <code>tidyverse</code> :</b>
```{r eval = FALSE}
paises %>% 
  filter(anio == 2007) %>% 
  summarize(mean(poblacion))
```
]


---
name: dplyr
# Paquete `dplyr` 

.pull-left[
<p> <code class='bold'>dplyr</code> es un paquete enfocado en la manipulación de datos. Es decir, nos permite realizar acciones como seleccionar columnas, filtrar filas, crear y ordenar variables, unir bases de datos, entre otras. </p>
]


.pull-right[
<img src='media/dplyr.png' width='100px'>
]

.right[
</br>
<h1>Paquete <code>ggplot2</code></h1>
]


.pull-left[
.right[<img src='media/ggplot2.png' width='100px'>]
]

.pull-right[
<p> <code class='bold'>ggplot2</code> es un paquete que permite la creación de gráficos en R. Es la herramienta de visualización más populr, dadas la gran cantidad de opciones de personalización que ofrece. </p>
]

---

### Operaciones básicas  de `dplyr`

<code class='bold'>select()</code> : Permite seleccionar variables (columnas).

```{r eval=FALSE}
base %>% 
  select(nombre_variable)
```


<code class='bold'>filter()</code> : Permite filtrar las observaciones de la base dado un criterio definido.

```{r eval=FALSE}
base %>%  
  filter(<Condición asociada a una variable>)
```

<code class='bold'>mutate()</code> : Crea nuevas variables (o modifica las existentes).
```{r eval=FALSE}
base %>% 
  mutate(nueva_variable = <Cálculo en base a una variable>,...)
```


<code class='bold'>rename()</code> : Renombra columnas.
```{r eval=FALSE}
base %>% 
  rename(nuevo_nombre = nombre_variable)
```

---

### Operaciones básicas  de `dplyr`


<code class='bold'>count()</code> : Cuenta el número de observaciones en cada grupo. 
```{r eval=FALSE}
base %>% 
  count(nombre_variable)
```


<code class='bold'>slice()</code> : Permite extraer observaciones (filas) de acuerdo a su posición.

```{r eval=FALSE}
base %>% 
  slice(vector_de_filas)
```

<code class='bold'>arrange()</code> : Ordena las filas según los valores de una columna.
```{r eval=FALSE}
base %>% 
  arrange(nombre_variable)
```

---
name: act1
class: inverse
### Actividad

<p> La base de datos <code class='blanco'>viviendasRM.xlsx</code> proviene de la página <a href="http://www.chilepropiedades.cl/" style="color: white">Chile Propiedades</a> y contiene 
información de distintas viviendas usadas que estuvieron a la venta en la Región Metropolitana el año 2020.
Descargue la base de datos <code class='blanco'>viviendasRM.csv</code> desde el siguiente <b><a  href="https://drive.google.com/file/d/1bEH6281W_jwMQA0b-gRvcHcxQSN4-uGR/view?usp=sharing" style="color: white">link</a></b>.

<b>1.</b> Importe la base de datos.

<b>2.</b> Limpie los nombres de la base de datos (<code>janitor</code>).

<b>3.</b> Usando funciones de dplyr y el operador <b>pipe</b> <code class='blanco'>%>%</code> indique:

<ol type="a">
  <li> Toda la información de la cuarta vivienda de la base </li>
  </br>
  <li> El número de baños de la octava vivienda. </li>
  </br>
  <li> El número de estacionamientos de la vivienda 14. </li>
  </br>
  <li> El total de superficie M2 y valor en UF desde la quinta vivienda hasta la décima. </li>
  </br>
  <li> Listado de superficie M2, corredor y valor en UF de las viviendas cuya superficie M2 es igual a 100 M2.</li>
</ol>

---

class: inverse, middle

<h1> Gráficos en <code class='blanco'>R</code>
---

# Gráficos en R

.pull-left[
.center[.<img src='media/ggplot2.png' width='300px'>]
]

.pull-right[<p>En R base si bien tenemos herramientas gráficas estas son limitadas. Por lo que 
para tener más opciones de personalización y un abanico más grande de gráficos usaremos 
<b>ggplot2</b>.</p>]

---


# Gráficos con `ggplot2`

<p><b>ggplot2</b> se basa en una <b>gramática de gráficos</b>, que permite describir los componentes de un gráfico como una combinación de capas:</p>


.pull-left[
.center[.<img src='media/ggplot_capas.png' width='500px'>]
]
.pull-right[

<ol>    
  <li>Un gráfico se inicia con la función <code class='bold'>ggplot(), la que crea el sistema de coordenadas de nuestro gráfico.</code></li>
  </br>
  <li>Cada capa adicional se agrega con un símbolo +, acompañado de la función deseada.</li>
</ol>
]

---
name: ggplot2
# Gráficos con `ggplot2`

<p>Un gráfico básico de <code>ggplot</code> requiere definir al menos tres elementos: </p>

<ol>    
  <li>Los datos a utilizar.</li>
  </br>
  <li>Los parámetros estéticos con que se "mapearán" las variables, es decir, cómo se asignarán las variables de nuestro conjunto de datos a ciertas propiedades visuales. La función para indicar esto es <code class='bold'>aes()</code> (del inglés "aesthetics").</li>
  </br>
  <li>Una capa que indique la forma en que se representarán gráficamente los datos (con la función <b>geom_*()</b>).</li>
</ol>

.center[
```{r, eval=FALSE}
ggplot(data = <DATOS>, aes(<MAPEOS>)) + 
  geom_<FUNCIÓN>(...)
```
]

---

### Algunos de los gráficos disponibles son:

.center[
|  |  |  |
| ---------------- | ----------------- | ----------- |
| `geom_area()`      | `geom_quantile()`    | `geom_violin()`    |
| `geom_density()`   | `geom_rug()`         | `geom_line()`      |
| `geom_dotplot()`   | `geom_jitter()`      | **`geom_bar()`**       |
| **`geom_col()`**  | `geom_text()`        | `geom_crossbar()`  | 
| `geom_freqpoly()`  | `geom_bin2d()`       | `geom_errorbar()`  |
| **`geom_histogram()`** | `geom_hex()`         | `geom_errorbarh()` |
| **`geom_point()`**     | `geom_density_2d()`  | `geom_linerange()` |
| `geom_smooth()`    | **`geom_boxplot()`**     | ¡Entre otras!      |
] 


<p>Adicionalmente, existen diversos paquetes que añaden nuevos gráficos y funcionalidades para <code class='bold'>ggplot2</code>. Volveremos sobre algunas de ellas en clases futuras. </p>

```{r echo=FALSE, warning=FALSE, message=FALSE}
## Creación variables a graficar ----------
library(tidyverse)
datos = pressure
set.seed(1535)
variable_continua = runif(36)
variable_discreta = c(rep("A",10),rep("B",15),rep("C",11))
base = data.frame("discreta" = variable_discreta,
                  "continua" = variable_continua)

base2 = data.frame("continua"=c(rnorm(100,mean=-2,sd=1),rnorm(100,mean=2,sd=1)))
base3 = data.frame("continua"=c(runif(1000)))


```

---
## Puntos - `geom_point()`

.pull-left[.chico1[
````markdown
plot(x = datos$temperature, 
     y = datos$pressure)
````

```{r fig1, fig.asp = .60, fig.align = "center", echo = F}
plot(x = datos$temperature, 
     y = datos$pressure)
```

]]

.pull-right[.chico1[
````markdown
ggplot(data = datos, 
       aes(x=temperature,y=pressure)) + 
  geom_point()
````

```{r fig2, fig.asp = .60, fig.align = "center", echo = F}
ggplot(data = datos, 
       aes(x=temperature,y=pressure)) + 
  geom_point()
```
]]


---
## Histograma - `geom_histogram()`

.pull-left[.chico1[
````markdown
hist(variable_continua,
     breaks = 9,
     col="lightblue")
````

```{r fig3, fig.asp = .60, fig.align = "center", echo = F}
hist(variable_continua,
     breaks = 9,
     col="lightblue")
```

]]

.pull-right[.chico1[
````markdown
ggplot(data=base, aes(x=continua)) + 
  geom_histogram(bins=10,
                 fill="lightblue",col="black")
````

```{r fig4, fig.asp = .60, fig.align = "center", echo = F}
ggplot(data=base, aes(x=continua)) + 
  geom_histogram(bins=10,
                 fill="lightblue",col="black")
```
]]

---

## Boxplot - `geom_boxplot()`

.pull-left[.chico1[
````markdown
boxplot(variable_continua,
        col="lightblue")
````
```{r fig5, fig.asp = .60, fig.align = "center", echo = F}
boxplot(variable_continua,
        col="lightblue")
```

]]

.pull-right[.chico1[
````markdown
ggplot(data=base, aes(x=continua)) + 
  geom_boxplot(fill="lightblue")
````

```{r fig6, fig.asp = .60, fig.align = "center", echo = F}
ggplot(data=base, aes(x=continua)) + 
  geom_boxplot(fill="lightblue")
```
]]

---
## Barras -`geom_bar()`

.pull-left[.chico1[
````markdown
barplot(table(variable_discreta),
        col="lightblue")
````

```{r fig7, fig.asp = .60, fig.align = "center", echo = FALSE}
barplot(table(variable_discreta),
        col="lightblue")
```

]]


.pull-right[.chico1[

````markdown
ggplot(data=base, aes(x=discreta)) + 
  geom_bar(fill="lightblue",col="black")
````

```{r fig8, fig.asp = .60, fig.align = "center", echo = F}
ggplot(data=base, aes(x=discreta)) + 
  geom_bar(fill="lightblue",col="black")
```

]]
---
## Potencial de ggplot2

.center[<img src='media/food-consumption.png' width='600px'>]

---
name: adios

### Referencias y material complementario

[**Food Consumption.png**](https://github.com/gkaramanis/tidytuesday/blob/master/2019/2019-week-51/dog-friendliness.R), de Georgios Karamanis.

[**Capítulo sobre visualización de datos del libro "R para Ciencia de Datos"`**](https://es.r4ds.hadley.nz/visualizaci%C3%B3n-de-datos.html), de Hadley Wickham y Garrett Grolemund.

[**Cheatsheet Domar Datos con `dplyr` y `tidyr`**](https://www.studocu.com/pe/document/universidad-nacional-agraria-la-molina/metodos-multivariados/domar-datos-con-dpyly-y-tidyr-cheatsheet-spanish/23427531), Traducido por Frans van Dunné.

[**Cheatsheet Transformación de Datos con `dplyr`**](https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/spanish/data-transformation_es.pdf), Traducido por Frans van Dunné.

[**Cheatsheet `ggplot2`**](https://diegokoz.github.io/intro_ds/fuentes/ggplot2-cheatsheet-2.1-Spanish.pdf), Traducido por Diego Kozlowski, previamente traducido por  Carlos Ortega, Santiago Mota y Carolina Mengoni Goñalons.

---
class: inverse, center, middle

# ¡Gracias!


