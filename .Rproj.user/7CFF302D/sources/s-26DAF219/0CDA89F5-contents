---
title: "Herramientas Computacionales, Algoritmos y Machine Learning (HCML)"
subtitle: "Clase 4: Manipulación de datos"
author: "<span style='font-size: 30px'>Stephanie Orellana - Camila Paredes - Natalie Julian - Elías Alvear</style>"
institute: "Pontificia Universidad Católica de Chile"
date: ""
output:
  xaringan::moon_reader:
    css:  
      - xaringan-themer.css
      - estilos.css
    lib_dir: libs
    seal: false
    nature:
      titleSlideClass: "inverse"
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: "16:12" 
---

class: left, bottom
background-image: url(media/logo.png)
background-position: 95% 7%
background-size: 40%

# `r rmarkdown::metadata$title`
----
## `r rmarkdown::metadata$subtitle`
### `r rmarkdown::metadata$author`
### `r rmarkdown::metadata$date`

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
style_mono_light(base_color = "#23395b",
#style_duo(
 # primary_color = "#576675",
 # secondary_color="#f5f5dc", # FF7373
  header_font_google = google_font("Fjalla One"),
  text_font_google   = google_font("Roboto"),
  code_font_google   = google_font("Fira Mono")
)


```

<style type="text/css">
.chico1 .remark-code{ 
font-size: 12px;
}
</style>

---
## Clase 4: Manipulación de datos

.pull-left[
**Paquete dplyr.**

* [Repaso.](#rps)

* [Otras funciones.](#otro)

[**Actividad guiada: dplyr.**](#act1)

[**Paquete `stringr`.**](#stringr)

[**Fechas y paquete `lubridate`.**](#fechas)

[**Cruces de bases de datos con `dplyr`.**](#cruce)

[**Actividad.**](#act2)
] 

.pull-right[
.center[<img src="media/dato1.jpg">]
] 


---

name: rps
class: inverse, middle

<h1> Repaso

---

### Operaciones básicas  de `dplyr`

<code class='bold'>select()</code> : Permite seleccionar variables (columnas).

```{r eval=FALSE}
base %>% 
  select(nombre_variable)
```


<code class='bold'>filter()</code> : Permite filtrar las observaciones de la base dado un criterio definido.

```{r eval=FALSE}
base %>%  
  filter(<Condición asociada a una variable>)
```

<code class='bold'>mutate()</code> : Crea nuevas variables (o modifica las existentes).
```{r eval=FALSE}
base %>% 
  mutate(nueva_variable = <Cálculo en base a una variable>,...)
```


<code class='bold'>rename()</code> : Renombra columnas.
```{r eval=FALSE}
base %>% 
  rename(nuevo_nombre = nombre_variable)
```

---

### Operaciones básicas  de `dplyr`


<code class='bold'>count()</code> : Cuenta el número de observaciones en cada grupo. 
```{r eval=FALSE}
base %>% 
  count(nombre_variable)
```


<code class='bold'>slice()</code> : Permite extraer observaciones (filas) de acuerdo a su posición.

```{r eval=FALSE}
base %>% 
  slice(vector_de_filas)
```

<code class='bold'>arrange()</code> : Ordena las filas según los valores de una columna.
```{r eval=FALSE}
base %>% 
  arrange(nombre_variable)
```

---

class: inverse, middle

<h1> Otras operaciones

---
name: otro

### Otras operaciones de `dplyr`

<code class='bold'>group_by()</code> : Agrupa filas a partir de categoría de una o más variables.

```{r eval=FALSE}
base %>% 
  group_by(nombre_variable)
```

<code class='bold'>summarise()</code> : Calcula un resumen a base a funciones de R.
```{r eval=FALSE}
base %>% 
  summarise(nombre_calculo = <Función de una variable>, ...)
```

<code class='bold'>case_when()</code> : Permite condicionar distintos resultados.
```{r eval=FALSE}
base %>% 
  mutate(nombre_variable = case_when(<condición1> ~ "resultado1",
                                     <condición2> ~ "resultado2",
                                     <condición3> ~ "resultado3", ...,
                                     TRUE ~ "resultado_final"))
```

---
class: inverse, middle

<h1> Actividad guiada

---
name: act1

#### Actividad guiada

Recordemos la base <b><a  href="https://drive.google.com/file/d/1bEH6281W_jwMQA0b-gRvcHcxQSN4-uGR/view?usp=sharing">viviendaRM.xlsx</a></b>, usada en la clase anterior:

| Variable  | Descripción |
| :------ | ------ |
|**Comuna** | Comuna donde está la vivienda.|
|**Link** | Link en chilepropiedades.cl.|
|**Tipo_Vivienda**| Tipo de vivienda. |
|**N_Habitaciones**| Número de habitaciones de la vivienda.|
|**N_Banos**|Número de baños de la vivienda.|
|**N_Estacionamientos**| Número de estacionamientos.|
|**Total_Superficie_M2**|Total de superficie en m2.|
|**Superficie_Construida_M2**|Superficie construida en m2.|
|**Valor_UF**|Valor en UF.|
|**Valor_CLP**|Valor en pesos chilenos.|
|**Dirección**| Dirección donde se ubica la vivienda.|
|**Quien_Vende**|Nombre del vendedor.|
|**Corredor**|Nombre del corredor.|


---

### Actividad guiada

Ahora realice:

<b>1.</b> Cambie el nombre de la variable <code>Quien_Vende</code> por <code>Vendedor</code>.

<b>2.</b> Ordene la base de datos según la cantidad de baños y luego entregue la información de las 
primeras diez viviendas.

<b>3.</b> Agrupe la base según la cantidad de estacionamientos e indique la cantidad de viviendas para cada grupo.

<b>4.</b> Calcule la media de los valores en UF y en CLP usando <code>dplyr</code>.

<b>5.</b> Genere una nueva variable que clasifique la cantidad de habitaciones según la siguiente tabla:

|Cantidad de Habitaciones|Categoría|
|:------|----|
|2 o menos| pocas_hab|
|3 a 5 (incluidos)| varias_hab|
|6 o más| muchas_hab|

<b>6.</b> Cree una nueva variable que contenga la superficie sin construir.

---
class: inverse, middle

<h2> Paquete <code class='blanco'>stringr</code>


---
name: stringr

## Paquete `stringr`

.pull-left[
<p> <code class='bold'>stringr</code> es un paquete que contiene múltiples funciones que nos permiten trabajar con strings de manera sencilla. Estas pueden ser muy útiles para cuando queremos detectar, cambiar o eliminar patrones en vectores de tipo <code>character</code>. </p>
]


.pull-right[
<img src='media/stringr.png' width='200px'>
]

---

## Paquete `stringr`

Para ejemplificar de manera simple algunas de las funciones usaremos el siguiente código:

```{r}
# install.packages("stringr")
library(stringr)
granja <- c("La vaca", "La oveja", "El chancho",
            "El toro", "El pavo", "La gallina")
```



<code class="bold">str_detect(objeto,pattern)</code> :  Detecta si el patrón indicado existe o no en cada elemento del objeto, retorna TRUE o FALSE.

```{r}
str_detect(granja,"La")
```


---

## Paquete `stringr`

<code class="bold">str_extract(objeto,pattern)</code> : Extrae de cada elemento la primera vez que el patrón se cumple.

```{r}
str_extract(granja, "La")
```

<code class="bold">str_remove(objeto, pattern)</code> : Elimina de cada elemento la primera ocurrencia del patrón.

```{r}
str_remove(granja, "La")
```

---

## Paquete `stringr`


<code class="bold">str_replace(objeto, pattern, replacement)</code> : Reemplaza la primera ocurrencia del patrón por un patrón de reemplazo.

```{r}
str_replace(granja, "La", "Una")
```


También existen los comandos <code class="bold">str_extract_all()</code>, <code class="bold">str_remove_all()</code>, <code class="bold">str_replace_all()</code> que realizan las mismas acciones anteriores, pero para todas las ocurrencias dentro de los elementos.

Estos patrones pueden estar dados por expresiones regulares, para más información con respecto a estas pueden ejecutar el comando <code class="bold">help(regex)</code>.


---

class: inverse, middle

<h2> Manejo de Fechas en <code class='blanco'>R</code>


---
name: fechas
## Fechas (clase `date`)
.pull-left[
 

En R la clase de archivo <code class='bold'>Date</code> nos permite definir objetos y variables de bases de datos en un formato fecha. El comando <code class="bold">as.Date</code> nos permite transformar objetos y variables a este formato, para lo que tenemos que configurarlo con los siguientes códigos:


]

.pull-right[

| Código | Descripción |
| :-----: | ----- |
| %Y | Año en 4 dígitos (1982)|
| %y | Año en 2 dígitos (82)|
| %m | Mes en 2 dígitos (01)|
| %d | Día del mes en 2 dígitos (13)|
| %A | Día de semana (Wednesday)|
| %a | Día de la semana abreviado (Wed)|
| %B | Mes (January)|
| %b | Mes abreviado (Jan)|

]


A continuación presentamos tres formas distintas de definir el mismo objeto en formato fecha:

```{r eval=F}
as.Date("1982-01-13")
as.Date("Jan-13-82", format = "%b-%d-%y")
as.Date("13 January, 1982", format = "%d %B, %Y")
```

---
name: lubridate
## Paquete `lubridate`

.pull-left[
<p>El paquete <code>lubridate</code> nos permite trabajar de manera eficiente con variables tipo fecha, es parte de <code class="bold">tidyverse</code>, pero hay que instalarlo de manera independiente.</p>

<p>Las funciones de este paquete son buenas para realizar operaciones entre fechas, una funcionalidad no incluida en R base.</p>
]


.pull-right[
<img src='media/lubridate.png' width='200px'>
]

---
## Paquete `lubridate`

Algunas de las funciones de lubridate son:

.pull-left[

| Función | Descripción |
| :-----: | ----- |
| year()| Año |
| month() | Mes |
| day() | Día |
| wday() | Día de la semana |
| qday() | Día del trimestre |
| yday() | Día del año |
| hour() | Hora |
| minute() | Minutos |

]

.pull-right[

| Función | Descripción |
| :-----: | ----- |
| second() | Segundos|
| quarter()| Trimestre |
| semester() | Semestre |
| am() | ¿Es am? |
| pm() | ¿Es pm? |
| leap_year() | ¿Es año bisiesto? |
| now() | Hora y fecha actual |
| today() | Fecha actual |

]

---
## Paquete `lubridate`

Como ejemplo, tomaremos una fecha que inicialmente será <code>chr</code>, lo primero 
será pasarlo a <code>date</code>:

```{r}
fecha <- "1995-04-09" #chr
fecha <- as.Date(fecha) #date

```

Ahora con <code>lubridate</code> desglosaremos la fecha.¿Cuál es el año?¿El día?¿Y el mes?

```{r warning=F, message=FALSE}
# install.packages("lubridate")
library(lubridate)

year(fecha);month(fecha);day(fecha)

```


---

## Paquete `lubridate`

¿Fue un año bisiesto?

```{r}
leap_year(fecha)
```

¿En qué semestre se encuentra la fecha?

```{r}
semester(fecha)
```

¿Y en qué trimestre?

```{r}
quarter(fecha)
```

---

## Paquete `lubridate`

La función <code>parse_date_time</code> nos permite más flexibilidad al momento de definir los formatos para las fechas. 
Podemos definir el formato de igual forma que con <code>as.Date</code> o de manera 
simplificada:

```{r eval = F}
fechas <- c("95-04-09", "87-12-03", "89-09-09")
parse_date_time(fechas, "ymd")
parse_date_time(fechas, "y m d")
parse_date_time(fechas, "%y%m%d")
```


También es útil para cuando tenemos distintos formatos 
de fechas dentro de una misma base:

```{r }
fechas <- c("1995-04-09", "09091989", "03-04-1987")
fechas <- parse_date_time(fechas, c("dmy", "ymd"))
```

---
## Paquete `lubridate`

Ahora si desglosamos <code>fechas</code> no tendremos ningún inconveniente:

¿Cuáles son los años?
```{r}
year(fechas)
```

¿Cuáles son los meses?
```{r}
month(fechas)
```

¿Y los días?

```{r}
day(fechas)
```

---

## Gráficos de fechas

```{r echo = F, message=F}
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Dummy data
data <- data.frame(
  day = as.Date("2017-06-14") - 0:364,
  value = runif(365) + seq(-140, 224)^2 / 10000
)
```


.pull-left[

```{r warning=F, echo = F}
ggplot(data, aes(x=day, y=value)) +
  geom_line( color="steelblue") + 
  geom_point() +
  xlab("") +
  theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, 
                                 hjust=1)) +
  scale_x_date(limit=c(as.Date("2017-01-01"),
                       as.Date("2017-02-11"))) +
  ylim(0,1.5)
```

]

.pull-right[

El paquete <code>ggplot</code> detecta el formato <code>date</code>, por lo que es posible 
hacer gráficos donde uno de los ejes sean fechas.

.chico1[

````markdown
ggplot(data, aes(x=day, y=value)) +
  geom_line( color="steelblue") + 
  geom_point() +
  xlab("") +
  theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, 
                                 hjust=1)) +
  scale_x_date(limit=c(as.Date("2017-01-01"),
                       as.Date("2017-02-11"))) +
  ylim(0,1.5)
````
]]

---

name: cruce
class: inverse, middle

<h2> Cruce de base de datos con <code class='blanco'>dplyr</code>

---

### Cruce de base de datos con `dplyr`

Algunas veces se debe trabajar con 2 o más bases de datos. Si poseen algún elemento en común 
es posible entrecruzarlas para así tener solamente una base.

Por ejemplo, tenemos dos bases con los 10 nombres más usados para niñas. A la izquierda la 
del 2021 y a la derecha la del 2020. ¿Podríamos hacer una sola base?

.pull-left[

|Nombre|Frecuencia|
| :-----: | ----- |
|Sofía|1144|
|Emma| 1044|
|Isabella|1020|
|Emilia|1018|
|Agustina|989|
|Julieta|853|
|Trinidad|851|
|Mia|842|
|Josefa|827|
|Isidora|808|

]


.pull-right[
|Nombre|Frecuencia|
| :-----: | ----- |
|Sofía|2465|
|Isabella|2463|
|Emilia|2410|
|Agustina|2321|
|Emma|2233|
|Isidora|2015|
|Trinidad|1914|
|Florencia|1882|
|Josefa|1844|
|Julieta|1789|

]

---

### Cruce de base de datos con `dplyr`

`inner_join()`: Trae los resultados de las tablas que cumplen con la condición de comparación 
entre columnas.

.center[<img src='media/inner.png' width="500px">]

---

### Cruce de base de datos con `dplyr`

Usando las bases <code>nombres2020</code> y <code>nombres2021</code> podemos entrecruzar. ¿Cómo quedaría con 
<code>inner_join()</code>?

```{r, echo=TRUE, eval=FALSE}
# Cargar las bases
load(file = "nombres1.RData")
load(file = "nombres2.RData")

inner_join(nombres1, nombres2)

```

```{r, echo=FALSE}
# Cargar las bases
load(file = "C:/Users/Naty/Documents/GitHub/Clases-R-Diplomado-Data-Science_2022/Clase 4/Bases de datos/nombres1.RData")
load(file = "C:/Users/Naty/Documents/GitHub/Clases-R-Diplomado-Data-Science_2022/Clase 4/Bases de datos/nombres2.RData")

inner_join(nombres1, nombres2)

```

---

### Cruce de base de datos con `dplyr`

`left_join()`: Trae todos los resultados de las tablas que cumplen con la condición de comparación entre columnas y, adicionalmente, trae todos los datos de la tabla de la izquierda.

.center[<img src='media/left.png' width="500px">]

---

### Cruce de base de datos con `dplyr`

¿Cómo quedaría con <code>left_join()</code>?

```{r}
left_join(nombres1, nombres2)
```


---

### Cruce de base de datos con `dplyr`

`right_join()`: Similar a la anterior, pero con la tabla de la derecha.

.center[<img src='media/right.png' width="500px">]

---
### Cruce de base de datos con `dplyr`

¿Cómo quedaría con <code>right_join()</code>?

```{r}
right_join(nombres1, nombres2)
```


---

### Cruce de base de datos con `dplyr`

`full_join()`: Trae los resultados de las tablas que cumplen con la condición de 
comparación entre columnas, además de los resultados de los registros de las 
tablas de la derecha y la izquierda.

.center[<img src='media/full.png' width="500px">]
---
### Cruce de base de datos con `dplyr`

¿Cómo quedaría con <code>full_join()</code>?

```{r}
full_join(nombres1, nombres2)
```


---

name: act2
class: inverse, middle

<h2> Actividad


---

### Actividad 

Las bases de datos <code>chart_chile</code> y <code>chart_arg</code> contiene la 
información del TOP 50 de las canciones más escuchadas en Spotify por cada país 
para cada día desde el año 2017 al 2021.

| Variable  | Descripción |
| :------ | ------ |
|**title** | Nombre de la canción.|
|**rank** | Ranking en el TOP50.|
|**date**| Fecha del Ranking. |
|**artist**| Artista.|
|**url**| url de la canción en Spotify.|

---

## Actividad


<b>1.</b> Cargue las bases de datos en R.

<b>2.</b> Vea si es necesario limpiar los nombres de las variables.

<b>3.</b> Reemplace los espacios en blanco de <code>artist</code> y 
<code>title</code> por guión bajo "_".

<b>4.</b> Pase la variable <code>date</code> a formato <code>date</code>.

<b>5.</b> Cree una nueva variable que contenga el día del año al que corresponde <code>date</code>, y 
otra que contenga el año del Ranking.

<b>6.</b> Encuentre el día del año al que correspondió su cumpleaños el 2021.

````markdown
# "2017-MES-DIA"
cumple <- as.Date("2021-04-09")
yday(cumple)
````


---

## Actividad


<b>7.</b> Separe para cada base el TOP 50 del día de su cumpleaños del año 2021 
usando las variables creadas en <b>5</b>.

<b>8.</b> Si quisieramos realizar entrecruzamientos entre las dos bases creadas. 
¿Qué variable nos serviría?

<b>9.</b> Con las dos bases y la variable detectada, genere los entrecruzamientos 
vistos en clases y analice:

- inner join.
- left join.
- right join.
- full join.


---

name: adios

## Referencias y material complementario


.large[**Paquete <code>stringr</code>**]

* [Cheatsheet `stringr`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/spanish/strings_es.pdf) (En español).

.large[**Paquete <code>lubridate</code>**]

* [Web del paquete `lubridate`.](https://lubridate.tidyverse.org/)

* [Cheatsheet `lubridate`.](https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/spanish/lubridate_es.pdf) (en Español)
---
class: inverse, center, middle

# ¡Gracias!

