---
title: "Herramientas Computacionales, Algoritmos y Machine Learning (HCML)"
subtitle: "Clase 2: Tipos y estructura de datos en R"
author: "<span style='font-size: 30px'>Stephanie Orellana - Camila Paredes - Natalie Julian - Elías Alvear</style>"
institute: "Pontificia Universidad Católica de Chile"
date: ""
output:
  xaringan::moon_reader:
    css:  
      - xaringan-themer.css
      - estilos.css
    lib_dir: libs
    seal: false
    nature:
      titleSlideClass: "inverse"
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: "16:12" 
---

class: left, bottom
background-image: url(media/logo.png)
background-position: 95% 7%
background-size: 40%

# `r rmarkdown::metadata$title`
----
## `r rmarkdown::metadata$subtitle`
### `r rmarkdown::metadata$author`
### `r rmarkdown::metadata$date`

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
library(knitr)
library(tidyverse)
style_mono_light(base_color = "#23395b",
#style_duo(
 # primary_color = "#576675",
 # secondary_color="#f5f5dc", # FF7373
  header_font_google = google_font("Fjalla One"),
  text_font_google   = google_font("Roboto"),
  code_font_google   = google_font("Fira Mono")
)


```

---
## Clase 2: Tipos y estructura de datos en R

.center[<img src='media/rtudio.png' width='300px'>]

.pull-left[
.left[

]

* [**Tipos de datos**](#tipos)

* [**Vectores**](#vectores)

* [**Matrices**](#matrices)

* [**Data frame**](#data)

* [**Tibble**](#tibble)

] 

.pull-right[
.left[

]

* [**Valores no disponibles**](#NA)

* [**Listas**](#listas)

* [**Operadores lógicos**](#logicos)

* [**Actividad**](#actividad)


] 


---
name: tipos

# Tipos de datos

<p> En R tenemos definidos distintas clases y tipos de datos, estos dependen del tipo de información que contengan en su interior. Con los comandos <code class='bold'>class()</code> y <code class='bold'>typeof()</code> podemos preguntar que tipo de dato es cada elemento. </p>


Los principales tipos de datos en R son los siguientes:

| Tipo de dato | Descripción | Ejemplo |
|---------|---------|---------|
| `integer` | Números enteros  | -1, 0, 1 |
| `numeric` | Números reales | -0.5, 1/2, 1 |
| `character` | Texto | "palabra", "y" |
| `logical` | Verdadero o Falso | 'TRUE' 'FALSE' | 


<p>Hay muchos otros tipos de datos en R, por ejemplo hay datos <code class='bold'>complex</code> (números complejos), <code class='bold'>date</code> (fechas), <code class='bold'>factor</code> (datos categóricos), etc.</p>

---
# Objetos en R

.center[<img src='media/tipo_ordenacion.jpeg' width='700px'>]

---
name: vectores


# Vectores 

Un vector es un ordenamiento unimensional de datos, dentro de un vector sólo puede existir un tipo de dato. En R los vectores se definen con el comando <code class='bold'>c()</code> y cada elemento se separa con una coma: 

--

<b class='azul'>Vector numérico</b>
```{r}
vector_1 <- c(-1/2, 1, 0.5)
class(vector_1)
```

--

<b class='azul'>Vector con letras</b>
```{r}
vector_2 <- c("A", "B","C")
class(vector_2)
```

--

.center[**¿Qué tipo de dato sería el vector `c(1,"dos",3)` ?**]

---

### Funciones para generar vectores

En la siguiente tabla se muestran algunas de las principales funciones usadas para facilitar la creación de vectores en R:

| Función | Descripción | Ejemplo |
|-----|------|-----|
| a:b | Genera una secuencia de números naturales entre a y b | `5:10` |
| seq() | Genera una secuencia de números a un intervalo regular | `seq(from= -5,to=5,by= 0.5)` |
| rep() | Genera una secuencia de repetición de elementos de un vector base | `rep(c("a","b"),times=3)` |
| letters | Vector constante con las letras desde la "a" a la "z" en minuscula | `letters` |
| LETTERS | Vector constante con las letras desde la "A" a la "Z" en mayúscula | `LETTERS` |

---

### Funcionalidades adicionales

Con el comando `length()` uno puede extraer el largo de un vector.

Se puede preguntar a R si un elemento es o no un vector con el comando <code class='bold'>is.vector()</code>


```{r}
is.vector( c(1,2,3) )
```

De la misma forma, podemos transformar un objeto a un vector con el comando <code class='bold'>as.vector()</code>.

<b>Seleccionar un elemento dentro de un vector</b>

Para seleccionar el elemento de un vector en R usamos los corchetes <code class='bold'>[]</code>, de la siguiente forma:

.center[**`objeto[i]`** extrae el i-ésimo elemento del vector llamado *objeto*]

---

name: matrices

# Matrices 

<p>Una matriz es un arreglo de datos en una estructura bi-dimensional, entendidas como filas y columnas. En R las matrices funcionan como una extensión de los vectores, dado que dentro de una matriz sólo puede existir un tipo de dato. Hay muchas formas de generar matrices, la manera más directa es usando el comando <code class='bold'>matrix():</code></p>

.center[ `matrix(vector, ncol = n, n_row = m, byrow = FALSE )` ]

.pull-left[
```{r}
matrix(1:9, ncol=3)
```


]

.pull-right[
```{r}
matrix(letters[1:9],ncol=3)
```
]

---

### Concatenación de vectores

Uno puede transformar un conjunto de vectores en una matriz con ayuda de los comandos <code class='bold'>cbind()</code> y <code class='bold'>rbind()</code>, el primero junta vectores de manera vertical (columna) y el segundo de manera horizontal (fila):

```{r}
v_1 <- 1:5
v_2 <- LETTERS[1:5]
```


.pull-left[
<b>Concatenación por columnas (c)</b>
```{r}
cbind(v_1,v_2)
```


]



.pull-right[
<b>Concatenación por filas (r)</b>
```{r}
rbind(v_1,v_2)
```
]

---

### Funcionalidades adicionales

<b>Seleccionar elementos de una matriz</b>

Las matrices funcionan siempre con el orden (filas,columnas), usando esta lógica es cómo se pueden seleccionar elementos:

.center[**`nombre_matriz[i, j]`** ~ i=filas, j=columnas]

<b>Ejemplos:</b>

<ul>
  <li><code class='bold'>nombre_matriz[i,]</code>: Selecciona la i-ésima <b>fila</b> de la matriz.</li>
  </br> 
  <li><code class='bold'>nombre_matriz[,j]</code>: Selecciona la j-ésima <b>columna</b> de la matriz.</li>
  </br>
  <li><code class='bold'>nombre_matriz[i,j]</code>:  Selecciona el j-ésimo elemento de la i-ésima fila.</li>
</ul>

<p>El comando <code class='bold'>dim()</code> nos permite obtener las dimensiones de la matriz, el primer número corresponde al número de filas, el segundo al número de columnas. </p>

<p>Uno puede preguntar si un objeto es una matriz con el comando <code class='bold'>is.matrix()</code> y uno puede transformar un objeto a una matriz con el comando <code class='bold'>as.matrix()</code></p>

---
name: data

# Data frame

Un data frame es un arreglo de datos en una estructura bi-dimensional. A diferencia de una matriz, un data frame puede tener columnas de distintos tipos de datos. En un data frame las columnas representan variables y las filas representan a individuos u observaciones.

|| Variable 1 | Variable 2 | ... | Variable n |
|----- | ----- | ----- | ----- | ----- |
|Observación 1| dato | dato | dato | dato |
|Observación 2| dato | dato | dato | dato |
|...| ... | ... | ... | ... |
|Observación m| dato | dato | dato | dato |

<p>Los data frame en R se pueden generar directamente con el comando <code class='bold'>data.frame()</code> o se pueden transformar otras estructuras definidas, por ejemplo, una matriz, con el comando <code class='bold'>as.data.frame()</code></p> 
---
### Ejemplo: Data Frame

La base de datos <code>mtcars</code> viene incluida en R en formato <code>data frame</code>. Los datos fueron extraídos de una revista de automóviles de 1974 y contiene observaciones de 32 autos con 11 características para cada uno. 

```{r echo=FALSE}
kable(mtcars[1:5,])

```

Podemos ver que cada fila corresponde a un auto, observación o registro. Y que cada columna corresponde a una variable, como el consumo del auto en galones por millas (mpg), la cantidad de cilindros (cyl), etc.

---
### Creación de un data frame

El comando data.frame() se puede usar de distintas formas:

<p><b>Forma 1</b>: Usar vectores ya creados. En este todos los vectores deben ser del mismo largo, el nombre de cada vector de guardará como el nombre de cada columna del data frame. </p> 

```{r eval=FALSE}
var_1 <- c(a1,a1,...,an)
...
var_m <- c(z1,z2,...,zm)
 
base_ejemplo <- data.frame(var_1, var_2, ... , var_n)
```

<p><b>Forma 2</b>: Definir directamente las columnas dentro del dataframe</p>

```{r eval=FALSE}
base_ejemplo <- data.frame(var_1 = c(a1,a1,...,an),
                           ...,
                           var_m = c(z1,z2,...,zm))
```




---


### Ejemplo: Creación de un data frame

Consideremos la siguiente tabla: 

| Nombre | Grupo Sanguíneo | Altura (cm) |
| ------ | --------------- | ----------- |
| Andrea  | AB | 165 |
| Bastian | O  | 180 |
| Camilo  | A  | 158 |
| Daniela | B  | 170 |

Definamos esta tabla como un data frame de las dos formas anteriores:

---

### Forma 1 


1.- Definimos las columnas de las matrices en vectores:

```{r}
nombre <- c("Andrea","Bastian","Camilo","Daniela")
grupo_s <- c("AB", "0", "A", "B")
altura_cm <- c(165, 180, 158, 170)
```

--


2.- Guardamos en el objeto 'tabla' el data frame:
```{r}
tabla <- data.frame(nombre,grupo_s,altura_cm)
tabla
```

--
```{r}
names(tabla)
```



---

### Forma 2

Definimos directamente los vectores dentro del comando <code class='bold'>data.frame()</code>:
```{r}
tabla <- data.frame(
  nombre = c("Andrea","Bastian","Camilo","Daniela"),
  grupo_s = c("AB", "0", "A", "B"),
  altura_cm = c(165, 180, 158, 170)
)
```

```{r}
tabla
```

```{r}
names(tabla)
```


---

### Selección de observaciones de un data frame

<p>Un data frame funciona igual que una matriz, uno puede seleccionar directamente filas y columnas específicas con el uso de corchetes <code class='bold'>[]</code>.</p>

<p>En los data frame es normal que las variables (columnas) tengan nombre, en R podemos usar estos nombres para seleccionar elementos de la base de datos:</p>

<b>Seleccionar variables dado nombre de variables</b>
```{r eval=FALSE}
nombre_base$nombre_variable
nombre_base[["nombre_variable"]]
```



<b> Seleccionar observaciones de un data frame </b>

<ul>
  <li><code class='bold'>base[i,]</code> : Todas las columnas, i-ésima observación (fila).</li>
  </br>
  <li><code class='bold'>base[i,j]</code> : i-ésima fila, j-ésima variable (posición).</li>
  </br>
  <li><code class='bold'>base[v_filas, v_columnas]</code> : todas las filas que están en <code class='bold'>v_filas</code> y columnas en <code class='bold'>v_columnas</code>.</li>
</ul>
---
name: tibble

# Tibble

<p>Los tibbles son data frames, pero tienen características que hacen su manejo más fácil y más acorde con la actualidad. La librería <code class='bold'>tibble</code> pertenece a la librería <code class='bold'>tidyverse</code> que veremos en profundidad en la próxima clase, por lo que lo instalaremos y lo cargaremos en nuestra sesión: </p>

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(tibble)
```

```{r, eval=FALSE}
install.packages("tidyverse")
library(tidyverse)
```

<p>Para transformar un data frame o una matriz a un objeto <code>tibble</code> usaremos el comando <code class='bold'>as_tibble()</code> de la siguiente forma:</p>

```{r, eval=FALSE}
base_tibble <- as_tibble(base_dataframe)
```

<p>Dependiendo de cómo importamos las bases de datos externas es probable que las bases de datos vengan precargadas como <code class='bold'>tibble</code>.</p>

---

### Beneficios de usar `tibble`

<b>Impresión en la consola</b>

<p>En comparación a un data frame, los tibble se imprimen de una manera mucho más limbia en la consola representando un resumen claro de la base de datos:</p>

.pull-left[
```{r}
cars
```
]

.pull-right[
```{r}
cars_tibble <- as_tibble(cars)
cars_tibble
```
]

---

<p> Los beneficios de impresión <code>tibble</code> se pueden apreciar más cuando tenemos bases de datos amplias, dado que solo muestran las primeras 10 filas y solo aquellas columnas que entran en el ancho de la pantalla</p>

```{r}
iris_tibble <- as_tibble(iris)
iris_tibble
```

---

```{r}
iris
```

---

### Creación de un tibble

Los tibble se definen de la misma forma que un data frame, volvamos al ejemplo anterior:

```{r}
tabla_tibble <- tibble(
  nombre = c("Andrea","Bastian","Camilo","Daniela"),
  grupo_s = c("AB", "0", "A", "B"),
  altura_cm = c(165, 180, 158, 170)
)

tabla_tibble
```

De la misma forma, la forma de selección de variables y observaciones de un data frame funcionan en los tibble (<code class='bold'>$</code>, <code class='bold'>[[]]</code>, <code class='bold'>[]</code>).

---
# Valores no disponibles (NA)

<p>En R los valores no disponibles (celdas vacías, valores perdidos, etc) se representan con <code>NA</code>, el tener elementos nulos dentro de un objeto de R <b>no</b> afecta la clase de este, por ejemplo:</p>

```{r}
vec_ejemplo <- c(1, NA, 3, NA, 5)
class(vec_ejemplo)
```

```{r}
tib_ejemplo <- tibble(
  nombre = c("Claudio","Javiera","Elias", NA,"Camila"),
  valor = c(10, NA, 7, NA, 15)
)
str(tib_ejemplo)
```

---
name: NA

### Omisión de NAs

<p> Una opción es omitir las observaciones faltantes <code>NA</code> de nuestros datos. La función <code class='bold'>na.omit()</code> omite los valores faltantes de nuestros objetos, por ejemplo: </p>

```{r}
na.omit(vec_ejemplo)
na.omit(tib_ejemplo)
```

---

### Omisión de NAs

Algunas funciones contienen argumentos que permiten omitir las observaciones NA de los elementos para realizar sus cálculos, por ejemplo en la función <code class='bold'>sum()</code> existe el argumento <code>na.rm</code> que nos elimina los NA del cálculo de la suma:

```{r}
sum(vec_ejemplo)

sum(vec_ejemplo, na.rm=TRUE)
```



---
name: listas

# Listas

<p>Una lista es una estructura de datos unidimensional, pero en cada elemento de la lista pueden haber elementos de distinto tipo. Estas se definen con el comando <code class='bold'>list()</code> de la misma forma que se define un data frame o un tibble.</p>

```{r}
vec <- LETTERS[1:5]
mat <- matrix(1:9,ncol=3)

lista <- list( "Elemento_1" = vec,
              "Elemento_2" = mat)
lista
```

---

### Seleccionar elementos de listas

<p>Uno puede seleccionar elementos de listas usando <code class='bold'>$</code> o <code class='bold'>[[]]</code>, seleccionando con el nombre del elemento o la posición:</p>


```{r}
lista$Elemento_1
lista[[2]]
```

.center[**¿Cómo podemos obtener la tercera fila del segundo elemento de nuestra lista?**]


---

name: logicos

# Operadores lógicos

```{r warning=FALSE, echo=FALSE, message=FALSE}
library(kableExtra)
library(dplyr)
a = tibble("Operador" = c("Menor que", 
                          "Mayor que",
                          "Menor o igual que",
                          "Mayor o igual que",
                          "Igual que",
                          "Distinto que",
                          "Intersección",
                          "Unión",
                          "Dentro de"),
           "Código" = c("<",">","<=",">=","==","!=","&","|","%in%"))
```

<p>En R los operadores lógicos permiten realizar preguntas, las que serán respuestas como  verdadero (<code>TRUE</code>) o falso (<code>FALSE</code>), algunos operadores básicos son:</p>

.pull-left[

```{r warning=FALSE, echo=FALSE}
a %>% kbl(align="lc") %>% kable_styling()
```

]

--

.pull-right[
```{r}
10 > 5
"Gato" == "gato"
c("a","B","c") %in% letters
```
]

---

### Usos de operadores lógicos

<p>Los operadores tienen múltiples usos, principalmente se usan para generar condiciones en la creación de funciones y filtrar bases de datos y/o vectores. Volvamos al ejemplo anterior: </p>

```{r}
tabla
```


<p>Supongamos que queremos seleccionar aquellas filas en donde la altura sea menor a 170 cm, esto se puede hacer de la siguiente forma:</p>

```{r}
tabla[tabla$altura_cm < 170, ]
```

---
class: inverse, middle

# Actividad

---
name: actividad

### Actividad

<b>1.</b> Cree un vector con números del 0 al 11.

<b>2.</b> Vea qué tipo de información contiene el vector en su interior (<code>class</code>) y su largo (<code>length</code>).

<b>3.</b> A partir de este vector cree una matriz de tres columnas (<code>matrix</code>).

<b>4.</b> Ahora pruebe añadiendo el argumento <code>byrow = TRUE</code>. ¿Qué cambia?

<b>5.</b> Confirme que ha creado correctamente una matriz con la función <code>is.matrix</code> y analice sus dimensiones (<code>dim</code>).

<b>6.</b> Tomemos el ejemplo de la base <code>mtcars</code>. Cargue la base y vea las diferentes formas de pedir los valores de las observaciones para la variable <code>mpg</code>.

```{r eval=FALSE}
mtcars$mpg
mtcars[,1]
mtcars[["mpg"]]
```

---
### Actividad

<b>7.</b> La segunda variable corresponde a <code>cyl</code>, la cantidad de cilindros. Y el segundo tipo de autos corresponde al modelo Mazda RX4 Wag. Pidamos entonces a R que nos entregue:

a. El valor de todas las variables para el modelo Mazda RX4 Wag.

b. La cantidad de cilindros para cada modelo de auto.

c. La cantidad de cilindros para el modelo Mazda RX4.

<b>8.</b> Veamos la diferencia entre la impresión de <code>mtcars</code> como <code>data frame</code> y como <code>tibble</code>.

```{r eval = FALSE}
mtcars
as_tibble(mtcars)
```

---

### Actividad

<b>9.</b> En base al tibble dado a continuación responda las siguientes preguntas:

```{r eval = FALSE}
tabla <- tibble(
  nombre = c("Raquel", "Diego", "Camila", "Karina", "Eduardo"),
  altura = c(1.6, 1.81, 1.73, 1.55, NA)
)

```

a. Calcule el promedio de las alturas (<code>mean</code>) con y sin NAs.

b. Entregue la altura de Diego.

c. Con R indique si Diego mide más que Raquel.

d. Con R indique si Raquel mide menos que Karina.

---
class: inverse, center, middle

# ¡Gracias!
